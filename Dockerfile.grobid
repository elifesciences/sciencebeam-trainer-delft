ARG base_image=
FROM ${base_image}

ENV PROJECT_FOLDER=/opt/sciencebeam-trainer-delft

# install python and other dependencies
RUN apt-get update \
    && apt-get install --yes --no-install-recommends \
        gcc \
        python3-minimal python3-venv python3-pip python3-setuptools python3-dev \
        curl \
    && rm -rf /var/lib/apt/lists/*

RUN python3 -m pip install pip --upgrade

# create virtual env (see also https://bugs.python.org/issue24875)
ENV VENV=/opt/venv
COPY requirements.build.txt ${PROJECT_FOLDER}/
RUN python3 -m venv ${VENV} \
    && python3 -m venv --system-site-packages ${VENV} \
    && ln -s ${VENV}/lib/python3.* ${VENV}/lib/python3 \
    && ${VENV}/bin/pip install -r ${PROJECT_FOLDER}/requirements.build.txt
ENV VIRTUAL_ENV=${VENV} PYTHONUSERBASE=${VENV} PATH=${VENV}/bin:$PATH

# install jep (and temporarily the matching JDK)
ENV TEMP_JDK_HOME=/tmp/jdk-${JAVA_VERSION}
ENV JDK_URL=https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-x64_linux_8u212b04.tar.gz
COPY requirements.jep.txt ${PROJECT_FOLDER}/
RUN curl --fail --show-error --location -q ${JDK_URL} -o /tmp/openjdk.tar.gz \
    && ls -lh /tmp/openjdk.tar.gz \
    && mkdir - "${TEMP_JDK_HOME}" \
    && tar --extract \
		--file /tmp/openjdk.tar.gz \
		--directory "${TEMP_JDK_HOME}" \
		--strip-components 1 \
        --no-same-owner \
    && JAVA_HOME=${TEMP_JDK_HOME} pip3 install -r ${PROJECT_FOLDER}/requirements.jep.txt \
    && rm -f /tmp/openjdk.tar.gz \
    && rm -rf "${TEMP_JDK_HOME}"
ENV LD_LIBRARY_PATH=${VENV}/lib/python3/site-packages/jep:${LD_LIBRARY_PATH}

# install sciencebeam-trainer-delft dependencies
COPY requirements.txt ${PROJECT_FOLDER}/
RUN pip install -r ${PROJECT_FOLDER}/requirements.txt

COPY requirements.cpu.txt ${PROJECT_FOLDER}/
RUN pip install -r ${PROJECT_FOLDER}/requirements.cpu.txt

COPY requirements.delft.txt ${PROJECT_FOLDER}/
RUN pip install -r ${PROJECT_FOLDER}/requirements.delft.txt --no-deps

# add sciencebeam_trainer_delft package itself
COPY sciencebeam_trainer_delft ${PROJECT_FOLDER}/sciencebeam_trainer_delft

# install into venv
COPY setup.py MANIFEST.in ${PROJECT_FOLDER}/
RUN pip install -e ${PROJECT_FOLDER} --no-deps

# add embedding registry with download locations
COPY config/embedding-registry.json ${PROJECT_FOLDER}/

# disable python warnings (and fix logging)
ENV PYTHONWARNINGS="ignore"

RUN mkdir -p /data \
    && ln -s /data ${PROJECT_FOLDER}/data
VOLUME ["/data"]

# remove libjep.so because we are providng our own version in the virtual env
ARG grobid_home=/opt/grobid/grobid-home
RUN rm "${grobid_home}/lib/lin-64/libjep.so"

# enable delft
COPY scripts/grobid ${PROJECT_FOLDER}/scripts/
ENV PATH ${PROJECT_FOLDER}/scripts:$PATH
ARG grobid_config=/opt/grobid/grobid-home/config/grobid.properties
ENV GROBID_CONFIG=${grobid_config}
RUN set-grobid-config.sh "grobid.crf.engine" "delft" \
    && set-grobid-config.sh "grobid.delft.install" "${PROJECT_FOLDER}" \
    && set-grobid-config.sh "grobid.delft.redirect_output" "true" \
    && set-grobid-config.sh "grobid.delft.package" "sciencebeam_trainer_delft.grobid" \
    && tail -5 "${grobid_config}"

# add additional wrapper entrypoint for OVERRIDE_MODELS
COPY ./docker/entrypoint.sh ${PROJECT_FOLDER}/entrypoint.sh
ENTRYPOINT ["/tini", "-s", "--", "/opt/sciencebeam-trainer-delft/entrypoint.sh"]
CMD ["./grobid-service/bin/grobid-service", "server", "grobid-service/config/config.yaml"]
